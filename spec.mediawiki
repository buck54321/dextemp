==Abstract==

We propose here a decentralized, non-custodial, trustless, and intermediary-free 
cryptocurrency exchange platform. 

The primary service provided by the decentralized exchange (DEX) is to match 
clients who would like to trade an asset of one type for an asset of another.
Trades are facilitated by a trustless atomic swap negotiation process carried 
out with all the cryptographic security guarantees of the respective blockchains.

Elimination of per-trade fees reduces the benefit an exchange operator might 
accrue from facilitating wash trading to artificially elevate trade volumes. 
Instead, user fees are collected as a one-time registration fee subject to loss 
upon violations of community conduct.

A custom order matching procedure is offered to mitigate abuses that commonly 
arise from high-frequency trading (HFT) algorithms and other bot-driven trading.

==Introduction==

Existing cryptocurrency exchange platforms fall into 4 overlapping categories: 
custodial corporate entities, services, tokens, and blockchains.
The vast majority of cryptocurrency trading is currently performed via 
centralized, custodial exchanges. 
Since trades at these exchanges take place off-chain, they generally settle 
instantly to make funds available for further trading. 
This is a nice feature, but it practically guarantees that the market 
will be a target of HFT and algorithmic traders, which can be unpredictable and 
malicious. 
Additionally, such exchanges earn revenue by collecting trading fees. 
Such a model creates incentives for an exchange to artificially inflate their 
volume by wash trading &#91;1&#93;. 
By one study, it has been estimated that more than 95% of reported exchange 
volume is faked 
[https://www.sec.gov/comments/sr-nysearca-2019-01/srnysearca201901-5164833-183434.pdf &#91;2&#93;].

Several DEX projects have been created to address some of these issues by 
replacing the exchange with a blockchain or a token, and they have met with 
varying degrees of success. 
While they remove the trusted third party (TTP), they insert their own products 
as a means to capture the trading fees (e.g. ...), which replaces the TTP 
friction with a new platform friction. 
The simple act of collecting trading fees serves to act as an incentive to 
centralize on a given solution, which runs counter to a system of open voluntary 
exchange. 
While a chain or token serves to remove the TTP, it also creates challenges with 
order matching, which typically occurs via the intermediate chain or token.

The DEX described in this document is based on atomic swaps, signed and 
transmitted by the clients. Thus, the exchange of funds is trustless and secure. 
The purpose of the DEX is to facilitate such peer-to-peer trades, while 
disincentivizing manipulative or abusive trading patterns, and utilizing an 
independently verifiable order matching algorithm that is difficult to game by 
traders and operators alike. The proposed DEX is not: an escrow service, and 
arbitration service, or a platform for HFT.

While trades are fully trustless, steps are taken to discourage malicious 
clients from hindering normal trade activity. 
Registered clients are bound by the 
[[#community-conduct|rules of community conduct]], violation of which typically
results in loss of trading privileges and registration fee. 
Less drastic punitive measures such as a cool-down period may be considered 
for minor, first-time or infrequent conduct violations.

The following list of non-negotiable, fundamental, DEX properties served as a 
basis for design. 

# Non-custodial. Assets must be traded directly between clients, without the exchange being in control of assets at any time.

# Intermediary-free. Trades must be executed in a secure and trustless manner.

# Resistant to malicious or manipulative trading. Deliberately disruptive behavior should be disincentivized, and volume manipulation mitigated by pseudo-random epoch-based order matching.

The remainder of this document details the design of the proposed DEX. 
It is intended as a first resource when implementing servers and clients.
Continuing client-server interoperability will likely depend on subtle aspects 
of the specification laid out in the following sections.

'''[[#communication-protocols|Communication Protocols]]''' provides preliminary background on the 
chosen messaging convention (JSON-RPC 2.0) and communication layer technologies 
that are to be used in implementing the DEX.

'''[[#distributed-exchange-design-fundamentals|Distributed Exchange Design Fundamentals]]''' describes the notable 
design aspects that facilitate an exchange service with the features described 
above.

'''[[#client-order-management|Client Order Management]]''' details the different order types and the 
client/server workflows required to place the orders.

'''[[#concept-of-operations|Concept of Operations]]''' details the interactions of the server and 
clients through registration, order matching, and the entire order execution 
process via an atomic swap.

==Communication Protocols==

===WebSockets===

Trustless negotiation of trades requires considerable messaging.
Transaction details must be reported and relayed at appropriate times, sometimes
with substantial delays between subsequent actions. 
Match notification via HTTP polling or other request interval-based methods are 
thus not suitable for the DEX system.
Persistent, full-duplex communication is critical to minimizing communication 
latencies and wasted bandwidth.
WebSockets are chosen as the default and preferred communications protocol for 
the DEX exchange API.
In addition to fulfilling the aforementioned needs, WebSockets are now a 
well-established technology with client software available for integration in 
virtually all popular programming languages.

To establish a WebSocket connection, a client must first supply connection parameters. 

<pre>
{
    "method": "connect",
    "id": 0,
    "params": {
        "accountid": "string"
    }
}
</pre>

Once a connection is established, the client may begin subscribing to relevant 
data and order feeds. 
By default, a client will be subscribed only to updates for orders submitted on 
the existing connection.

Subscriptions will follow the general format below. The <code>params</code> will 
vary with subscription type.

<pre>
{
    "method": "subscribe",
    "id": int,
    "params": {
        "channel": "string",
        ...
    }
}
</pre>

===JSON-RPC===

JavaScript Object Notation - Remote Procedure Call v2.0 (JSON-RPC 2.0) is a 
message formatting protocol for client-server communications 
[https://www.jsonrpc.org/specification &#91;3&#93;].
The DEX server API uses JSON-RPC exclusively for both inbound and 
outbound client communications.
The JSON-RPC structure is simple and flexible.

<pre> 
{
	"method": "string",
	"id": int,
	"params": {} || &#91;&#93;
}
</pre>

<pre>
{
	"result": {...} || null,
	"error": {...} || null,
	"id": int
}
</pre>

The <code>method</code> is the "remote procedure" being called, analagous to
calling a function. 
Most parameters are passed as part of a <code>params</code> object or array. 
Parameters will vary with method.
The <code>id</code> field links a response to a request, and is optional for
''notifications'' which require no response.

JSON-RPC 2.0 specifies that in the case of an error, the response's <code>error</code>
field will be non-<code>null</code> and the <code>result</code> field will be 
<code>null</code>. 
The opposite is true in the case of a success.

===HTTP===

An API using HTTP for message transport may be provided for basic account 
management and server status queries, however WebSocket connections are to be 
the sole means for placing, monitoring, and executing orders in the processes 
described in Sections 5 and 6.
The primary reason for limiting the scope of the HTTP API is to eliminate client 
polling for rapidly changing resources, such as order status API endpoints.


==Distributed Exchange Design Fundamentals==

There are several notable aspects of the DEX design that were chosen to permit 
peer-to-peer trades with the mechanics of order execution existing entirely on 
the separate blockchains via atomic swaps.
These are:
* Fixed lot size per market (multiple markets per trading pair), and equivalent lot sizes between trading pairs for a given asset
* Epoch-based pseudorandom order matching
* Client identities based on public key infrastructure (PKI)
* Registration fees in place of per-trade fees
* An open and rigidly-defined interface for integration of arbitrary assets

This section describes each of these design aspects.

===Fees===

Rather than collecting fees on each trade, fees are collected by the pool during 
registration only.
Registration fees discourage certain spam attacks, and help to cover DEX 
operating expenses.
Further, collecting fees from trades executed via atomic swaps (where the server 
is never in control of funds, and settlement occurs directly on-chain) would 
add considerable complexity to the swap process.
Registration fees will be configurable by the exchange operator, but the fee 
would need to be reasonable for both the client and server operator.

===Lot Sizes===

Each market will have a specified lot size that is configurable by the exchange 
operator.
This is done to simplify the atomic swap process, and to reduce on-chain fees on 
the respective blockchains.
Order quantities must be in integer multiples of the lot size.

The different trading pairs for a given asset (e.g. DCR/BTC and DCR/LTC) will 
use the same fixed lot sizes to ameliorate the burden of moving funds from one 
market to another.

Lot sizes may change over time, so the client should periodically request the 
up-to-date market limits using the '''lotsize''' method (no <code>params</code> 
required), although a place order request with invalid amounts for the current 
lot size will be met with a server response with a non-null error.

A sample positive response to a <code>lotsize</code> request will have the 
following <code>result</code> fields.

{|
! field !! type !! description
|-
| assets || &#91;{"BTC": &#91;0.001, 0.1&#93;, ...}&#93; || list of lot size objects (see below)
|}

The lot size objects in the `assets` list will have two fields.

{|
! field !! type !! description
|-
| symbol || string || asset symbol
|-
| lotsizes || &#91;int&#93; || lot sizes in atoms.
|}

===Epoch-based Order Matching===

In order to devalue predatory behavior exhibited by certain high-frequency 
trading algorithms, received orders are not processed continuously, but rather 
after a shuffling step with all other orders received in a fixed duration period 
called an ''epoch''. 
The goal of this algorithm is to reduce the probability that an individual or 
collaborating pair can submit two orders that match with each other. Limiting 
this possibility mitigates advantages gained from front-running, spoofing, and 
other manipulative trading practices. 

====Epoch Time====

For a given epoch duration '''''d > 0''''' , and current UNIX epoch time stamp 
'''''t''''' (in seconds since Jan 01 00:00:00 1970 UTC), the current order 
matching epoch index, '''''i''''', and epoch range are computed as 

<!--i = t / d, i d \leq t_i < d (i + 1)-->
[[File:spec/images/epoch-index.png]]

where '''''/''''' is integer division. For example, at the time of writing, 
'''''t = 1562008475''''' , which for duration '''''d = 10''''' corresponds to 
epoch number '''''i = 156200847''''' spanning '''''&#91;1562008470, 
1562008480)'''''.
This convention allows epoch times to be known without querying the server.

====Pseudorandom Order Matching====

When the epoch ends, a match cycle begins.

First, the order pool is shuffled.
Shuffling is deterministic, using the Fisher-Yates algorithm where the 
random number generator seed is derived from the hash of the concatenated order 
[[#client-order-management|ID hashes]].
Specifically for hash function '''''f''''', the seed hash, 
'''''H<sub>seed</sub>''''' is computed as 

<!--H_{seed} = f(f(order_1) || f(order_2) || ... || f(order_N))-->
[[File:spec/images/seed-eq.png]]

where '''''order<sub>i</sub>''''' represents the order ID of the ith order in a 
lexicographically sorted list of order IDs and '''''||''''' indicates 
concatenation.

The order IDs and final hash are published at the start of the matching process.
This is done so that the shuffling may be independently computed for external 
verification and to facilitate server mesh operation.

Orders are processed one at a time. Each order is matched according to its type.

1. If the order is a '''cancel order''', any corresponding standing limit order is removed from the list and the cancel order is considered filled. If a cancellation is processed before the order that it cancels, the cancellation will fail, and will need to be re-submitted. That is, cancel orders do not affect down-queue orders, only standing orders.

2. If the order is a limit order with time in force ''standing'' that cannot match immediately (a '''maker'''), it is added to the standing orders. It is immediately able to match orders further down the queue.

3. If the order is a '''taker''', it is matched against the best available standing order. Clients for both orders are notified and the settlement process begins. The orders are set aside for monitoring. If a limit order with time in force ''standing'' on either side of the match is only partially filled, it is added to the standing orders with the appropriate modifications and is immediately available for matching again.

Any unmatched quantity on a limit order with time in force ''immediate'' is 
left unfilled. 
Market orders and immediate limit orders cannot match orders further down the 
queue. 

When a limit order matches a limit order, the price assigned to the match is the 
average of the two orders, with a split atom going to the maker.

The process continues with the next order in the list and iterates until all 
orders have been processed.

===Identities based on Public Key Infrastructure (PKI) Key Pairs===

The server as well as the clients are identified and authenticated using public 
keys, with matching private keys used to sign and authorize orders.
This is done because...

===Blockchain Interaction===

Administration of the DEX will require that the exchange operator have access to 
trusted nodes for each of the assets supported.
While operation via a surrogate blockchain data service such as a block explorer 
is potentially feasible, it would entail significant security risks.
Initial development will use only a direct connection to full nodes of each 
supported asset's blockchain.

With the exception of Decred and Bitcoin, which will be implemented during 
initial phases of DEX development, project developers will be responsible for 
adding support for their particular asset. 

Adding support for an asset is accomplished by implementing a particular 
[https://golang.org/ Go] interface. 
The interface is exported and compiled with `-buildmode=plugin` to enable 
dynamic importing by the exchange operator. 
The operator will decide which plugins to import in the DEX configuration. 

<pre>
type DExAsset interface {
  // Initialize the asset. An channel is passed that will receive a signal
  // when a new block is added to the chain. 
  // The path to a configuration file is the only other argument. 
  // The configuration file format is not formalized, so the asset developer
  // will need to publish instructions for configuration.
  Initialize(chan struct{}, string) error
  // UTXO retrieves info about the transaction output.
  UTXO(string, int) (DExUTxO, error)
}

type DExUTxO interface {
	Confirmations() int
	Valid() bool
	Address() string
	Lock() [32]byte
	Key() [32]byte
}
</pre>

While the community may have an interest in formally monitoring asset software 
for bugs and malicious behavior, the initial round of DEX development will 
implement only rudimentary error checking and quarantine procedures. 

==Client Order Management==

The order types that must be handled are limit, market, and cancel orders. Limit 
orders are used to buy or sell a specified amount of an asset at a rate no 
higher (buy) or lower (sell) than a given limit price.  Market orders are used 
to buy or sell a specified amount of an asset at the best price available. 
Cancel orders are used to cancel unfilled limit or market orders.

Orders placed in the duration of an epoch are accumulated and selected 
pseudo-randomly for matching, as described in 
[[#epoch-based-order-matching|Epoch-based Order Matching]]. This section describes 
the steps required of the client to place an order 
([[#order-preparation|Order Preparation]]), and the interactions between the 
client and server to execute an order once a match has been selected.
	
Also note that a DEX client will communicate with both the DEX server and their 
own cryptocurrency wallets so that the client can:
* Communicate order data and swap status to the server
* Perform the atomic swaps (i.e. create contracts and redeem on the client asset's blockchain)

===Order Preparation===

The following steps are required to prepare to place a market or limit order to 
trade assets on chain A for assets on chain B.

# Client chooses an amount of an asset on chain A that they wish to use for an order, and provides this amount to a wallet they control for chain A.

# Wallet A selects one or more UTXOs that sum to at least the amount specified.

# Client requests a new address from wallet B to include in the order as the destination for the funds.

# Client requests wallet A signs the order using the corresponding private keys to demonstrate control of the funds.

===Limit Orders===

Limit orders are for the trade of assets at a rate no higher (buy) or lower 
(sell) than a specified price. 
The client may specify the "time in force" of a limit order as one of: (a) 
''standing'', which remains on the books until filled or cancelled, or (b) 
''immediate'', which can complete execution wholly or partially unfilled. As 
such, the ''immediate'' option is intended for limit orders with a price that 
crosses the spread (i.e. a taker rather than a maker). The order 
<code>quantity</code> must be an integer multiple of the lot size (see 3.1.4). 

# Client submits limit order as a signed message that includes the fields listed below, where signatures demonstrate control of the unspent funds and the long-lived identity of the client.

# Server receives the order, adds the time, signs it, stores it and replies to the client with the signed order and an order id.

# Server broadcasts the limit order to other connected clients, after removing the client identity signature, and adds it to its order book.

# Server accumulates a queue of orders, and matches orders once an epoch.

# Server signs and publishes the matched orders, after removing the identity signatures, at the end of the epoch, updates order book.


The anticipated data fields for the limit order <code>params</code> field are 
listed here. The <code>accountid</code> field is retrieved during registration 
as described in Section 5.1.

{|
! field       !! type   !! description
|-
| accountid   || string || client account identifier
|-
| timestamp   || int    || UTC timestamp generated at the time of order submission of trades requires a fair amount of messaging between the 2 clients, via the DEX trade API.n
|-
| tradepair   || string || market. trading pair. e.g. DCR/BTC
|-
| ordertype   || string || "limit" for a limit order
|-
| direction   || string || one of "buy" or "sell"
|-
| ordersize   || int    || order size, in atoms (*1e8)
|-
| price       || int    || price, in atoms/Satoshi or similar (*1e8)
|-
| timeinforce || string || one of ''standing'' or ''immediate''
|-
| utxotxid    || string || transaction hash associated with the utxo
|-
| utxoindex   || int    || the index of the utxo in the transaction outputs
|-
| nonce       || string (int|?) | a unique value which identifies this order in communications
|-
| signonce    || string || signature of the nonce showing control of UTXO
|-
| sigorder    || string || signature of the order data by account privkey
|}

The successful response will contain a unique order ID that must be referenced for cancellation. 

{|
! field     !! type   !! description
|-
| orderid   || int    || unique server generated id for a submitted order
|-
| sigorder  || string || signature of the order by server
|}

===Market Orders===

# Client submits market order as a signed message, where signatures demonstrate control of the unspent funds and the long-lived identity of the client.

# Server receives the order, adds the time, signs it, stores it, and replies to the client with the signed order and an order id.

# Server broadcasts the market order to other connected clients, after removing the client identity signature.

# Server accumulates a queue of orders, and matches orders once an epoch.

# Server signs and publishes the matched orders, after removing the identity signatures, at the end of the epoch, updates order book.

{|
! field     !! type   !! description
|-
| accountid || string || client account identifier
|-
| timestamp || int    || UTC timestamp. order broadcast time
|-
| tradepair || string || market. trading pair. e.g. DCR/BTC
|-
| ordertype || string || "market" for a market order
|-
| direction || string || one of "buy" or "sell"
|-
| ordersize || int    || order size, in atoms (*1e8)
|-
| utxotxid  || string || transaction hash associated with the utxo
|-
| utxoindex || int    || the index of the utxo in the transaction outputs
|-
| nonce     || string (int|?) | random nonce for this order
|-
| signonce  || string || signature of the nonce showing control of UTXO
|-
| sigorder  || string || signature of the order data by account privkey
|-
|}

The successful response will contain a unique order ID that must be referenced for cancellation. 

{|
! field     !! type   !! description
|-
| orderid   || int    || unique server generated id for a submitted order
|-
| sigorder  || string || signature of the order by server
|-
|}

Market orders cannot be cancelled.
Any portion of the requested quantity that does not match immediately is left 
unfilled. 

===Cancel Order===

Cancel orders cancel existing orders and remove them from the order book. 

# Client submits cancel order as a signed message that references the corresponding unfilled order, where signatures demonstrate control of the unspent funds and the long-lived identity of the client.

# Server receives the order, adds the time, signs it, stores it and replies to the client with the signed order and an order id.

# Server broadcasts the cancel order to other connected clients, after removing the identity signature.

# Server accumulates a queue of orders, and matches orders once an epoch.

# Server signs and publishes the matched orders, after removing the identity signatures, at the end of the epoch, updates order book.

{|
! field     !! type   !! description
|-
| accountid || string || client account identifier
|-
| timestamp || int    || UTC timestamp. order broadcast time
|-
| tradepair || string || market. trading pair. e.g. DCR/BTC
|-
| orderid   || int    || order identifier
|-
| nonce     || string (int?) || a unique value which identifies this order in communications
|-
| signonce  || string || signature of the nonce showing control of UTXO
|-
| sigorder  || string || signature of the cancellation data by account privkey
|}

The successful response will contain a unique order ID. 

{|
! field     !! type   !! description
|-
| orderid   || int    || unique server generated id for a submitted order
|-
| sigorder  || string || signature of the order by server
|}

==Concept of Operations==

This section describes how the exchange service matches orders from registered 
users, and facilitates order execution by the clients directly on their assets' 
blockchains.

===Account Creation===

Access to markets is granted to client identities represented in long-lived PKI 
key pairs [ref?] fee to the exchange.
The process of establishing an identity on the server and gaining authorization 
for a particular market proceeds as follows.

# Client connects to server and both identify themselves using a long-lived PKI keypair after the associated client has paid a (one-time) fee.

# Server responds with a fee that the client must pay to get a trading account on the server. Separeate fees may be required for individual markets since the potential for abuse may vary based on the market lot sizes or order book.

# Client pays the fee, and server gives the client’s long-lived PKI public key access to one or more markets.

An authenticated and authorized client may proceed to place orders as described 
in Section 5.

===Atomic Settlement===

In order to facilitate trustless, non-custodial exchange, the DEX leverages an 
atomic swap process that enables all parties to maintain full control over their 
assets at every step.
The DEX primarily acts as a matchmaker, connecting two orders and relaying 
messages between the two clients. 
Additionally, the DEX performs some trade monitoring to ensure that parties are 
acting in good faith. 
Clients who fail to act on their trades appropriately will be issued a penalty 
in accordance with the [[#community-conduct|rules of community conduct]].

The following cases are meant to provide a high-level overview of the trade 
process, and to illustrate how to handle a perfect match, a partial fill, and 
multiple matches within an epoch. For the sake of illustration, the following 
simplifications are made.

<img src="spec/images/ab-profiles.svg" align="right">
# The lot size for the market is 1 DCR. 
# All backing funds for the orders are in the form of a single UTXO.
# There are no fees. 

The examples involve a participant named Alice, who holds some DCR and would 
like to exchange it for some BTC. 
The market is a DCR/BTC market, where DCR is the “base asset” and BTC is the 
“quote asset”. 
Order quantities are in units of DCR, and the rate offered in a limit order is 
denominated in BTC.

====Case A: Perfect match====

In the most basic case, Alice and a trader named Bob are the only participants 
and their orders match perfectly.

<img src="spec/images/alice-order.svg" align="left">
'''A1: Alice places a limit order''' to sell 3 DCR at 0.1 BTC per DCR for a 
total of 0.3 BTC. 
As a limit order, Alice must specify both the quantity and the price, as a rate, 
as well as her BTC address.
Alice signs the order information. The signature provides proof of the 
order and justifies any penalties imposed on Alice should she fail to follow 
through on a trade.

<img src="spec/images/bob-order.svg" align="right">
'''A2''': During some later epoch, '''Bob places a market order''' to buy DCR 
with BTC at the best available price. 
Bob’s order will contain both an address and a signature. 
As a market order, Bob’s order must match in this epoch. Any unfilled portion
is immediately cancelled.

'''A3''': At the end of the epoch, the '''DEX performs a match cycle''', 
recognizes the match, and informs both Alice and Bob that a match has occurred. 
Because the order quantities are identical, the orders are simply removed from 
the book and set aside for monitoring. 
The DEX informs both clients that a match has been made and provides Bob with 
Alice’s address. 

<img src="spec/images/ab-match.svg">

'''A4''': Because Alice is the maker, she will broadcast her initialization
transaction first. 
She will be expected to broadcast and report her transaction to the DEX 
within a specified amount of time.

Before Alice can '''prepare her initialization transaction''', she must generate 
a key known only to herself. 
From the key, Alice generates a “lock” and constructs an output script 
such that if someone can provide both Alice’s key and the pubkey for Bob’s 
specified address, they can spend the output. 
In practice, the key is simply a random 32-byte number, and the lock is it’s 
hash. 

In addition, Alice constructs the output script with a second, alternative lock 
that allows her to spend the output herself, but only if the output remains 
unspent for a specified amount of time. Alice sets her timelock to 48 hours.

'''Alice broadcasts her initialization transaction''' to the Decred network. 
She informs the DEX of the transaction details, which the DEX relays to Bob. 
Alice '''does not''' reveal the key that she created. 

<img src="spec/images/alice-init.svg">

'''A5: Bob inspects Alice's transaction and retreives the lock. 
After the requisite number of confirmations, Bob prepares his initialization 
transaction'''. He uses Alice's lock here as well, and creates an output script 
satisfied by Alice’s key and the pubkey for Alice’s address. 

Bob sets his timelock to 24 hours. 
Bob should also check that the timelock in Alice's initization is set to 48 
hours. 
If Alice’s timelock duration is set near or below Bob’s timelock duration, Alice 
could potentially spend the DCR output before Bob.

'''Bob broadcasts his initialization transaction''' to the Bitcoin network. 
He informs the DEX of the transaction details, and the DEX relays the 
information to Alice. 

<img src="spec/images/bob-init.svg">

'''A6: Alice prepares a redemption transaction''' that spends the output from 
Bob’s initialization transaction to her own address.
In order to spend the Bitcoin from Bob’s transaction, she needs to provide the 
key created in step 4.

'''Alice broadcasts her redemption transaction'''.
Though both the DEX and Bob are capable of monitoring for the transaction, it 
is expected that Alice informs the DEX server of the transaction details anyway. 
The DEX server will notify Bob of the details.

<img src="spec/images/alice-redeem.svg">

'''A7: Bob prepares his redemption transaction''' using the key gleaned from 
Alice’s redemption transaction and the output from Alice’s initialization 
transaction.

'''Bob broadcasts his redemption transaction, completing the atomic swap.'''

<img src="spec/images/bob-redeem.svg">

====Case B: Multi-taker with partial fill====

In case B, Alice is similarly trying to sell 3 DCR for 0.3 BTC, but the match 
found by the DEX is not perfect this time. 

'''B1''': Same as A1. Alice submits her signed order to the DEX.

'''B2''': Bob places a market order for 0.1 BTC worth of DCR at market price. 
A new client, Carl, places an identical market order for 0.1 BTC worth of DCR.

<img src="spec/images/abc-order.svg">

'''B3''': The DEX finds the match and informs all parties, providing Alice with 
Bob and Carl's addresses. 
The DEX cannot simply remove Alice’s order, because it is only partially filled. 
In this case, the DEX does not remove the order from the order book, instead 
just marking it partially filled and calculating the remaining quantity. The 
order is returned to the order book and is immediately able to match again.

<img src="spec/images/abc-match.svg">

<img src="spec/images/a-init-bc.svg" align="right">
'''B4''': As the maker, Alice goes first again. 
She groups her matches from the epoch and creates two different keys, one for 
Bob and one for Carl. She sets her timelocks to 48 hours. 
'''Alice broadcasts her initializaiton transaction''' to the Decred network and 
informs the DEX about the transaction details, which the DEX relays to Bob and 
Carl.

<img src="spec/images/bc-init.svg" align="right">
'''B5''' After waiting the requisite number of confirmations, Bob and Carl 
prepare their initialization transactions using the locks from Alice's
transaction. They broadcast their transactions.

'''B6 and B7''' follow naturally from case A, with Alice creating two redemption
transactions, one for Bob and one for Carl. 
Bob and Carl then follow up with their own redemptions.

===Community Conduct===

By registering, clients agree to abide by the rules described here. These rules 
are designed to ensure that clients are acting in good faith and maintaining 
behavior that contribute to a smooth DEX experience for humans. 

====Rules of Community Conduct====

'''Rule 1: You must act on a match when it's your turn'''

In the event that the taker fails to start the atomic swap process within a 
pre-defined timeout period with their initialization transaction, the maker 
will be notified that order execution is terminated due to failure of the taker 
to accept the order. The Maker's limit order will not go 
back on the order book, but they may be given the option to replace the order. 

In the event that the Maker fails to respond within a pre-defined timeout period 
to the taker's initialization transaction with an initialization transaction of 
their own, the taker will be given the option to place a new market order.

'''Rule 2: Your cancellation ratio must at or below 1/5'''

This is the ratio of the count of cancelled orders to the count of completed 
orders. An order is considered completed for a client once an initialization 
transaction is broadcast. In the case that the client is the maker and the taker
(first to act) fails to broadcast their initialization, the order is not 
considered in calculating the ratio. 

This rule is not in effect until a user has 5 orders to consider. This ensures 
that a client can potentially cancel their first four orders without penalty, 
as long as their fifth order is not cancelled. 

====Penalties====

The primary penalty for breeches of conduct is a '''ban''', which includes loss 
of trading privileges, forfeiture of registration fee, and immediate cancelling 
of any unfilled orders

===Data API===

Trade history will be made available to both websocket and HTTP clients. 

==Exchange Administration==

===Infrastructure===

===Data Persistence===

==Security==

===Chain-derived Security===

===Data Encryption===

...

==References==

&#91;1&#93; Teall, John L., Financial Trading and Investing, p. 336 (2013)

&#91;2&#93; [https://www.sec.gov/comments/sr-nysearca-2019-01/srnysearca201901-5164833-183434.pdf Bitwise Presentation to the U.S. Securities and Exchange Commission] (2019)

&#91;3&#93; [https://www.jsonrpc.org/specification JSON-RPC 2.0 Specification]
